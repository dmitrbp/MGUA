import re
from datetime import datetime


class RealEstateChecker:
    def __init__(self):
        self.cadastral_number = ""
        self.ownership_data = None
        self.encumbrances = []
        self.vri_data = None

    def validate_cadastral_number(self, number):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
        pattern = r'^\d{2}:\d{2}:\d{6,7}:\d+$'
        return re.match(pattern, number) is not None

    def mock_api_call(self, endpoint, params):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã requests.get()
        mock_data = {
            'ownership': {
                'status': '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ',
                'owner': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
                'registration_date': '2020-05-15',
                'share': '1/1'
            },
            'encumbrances': [
                {
                    'type': '–∏–ø–æ—Ç–µ–∫–∞',
                    'registrator': '–ê–û "–°–±–µ—Ä–±–∞–Ω–∫"',
                    'date': '2020-05-15',
                    'number': '123-456'
                }
            ],
            'vri': {
                'code': '141001000000',
                'description': '–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏',
                'permitted_use': '–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏'
            }
        }
        return mock_data.get(endpoint, {})

    def check_ownership(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        if not self.validate_cadastral_number(self.cadastral_number):
            return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞"}

        self.ownership_data = self.mock_api_call('ownership',
                                                 {'cadastral_number': self.cadastral_number})
        return self.ownership_data

    def check_encumbrances(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–π"""
        self.encumbrances = self.mock_api_call('encumbrances',
                                               {'cadastral_number': self.cadastral_number})
        return self.encumbrances

    def check_vri(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.vri_data = self.mock_api_call('vri',
                                           {'cadastral_number': self.cadastral_number})
        return self.vri_data

    def generate_report(self):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–∞–≤–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        report = f"""
        –û–¢–ß–ï–¢ –û –ü–†–ê–í–û–í–û–ú –†–ï–ñ–ò–ú–ï –û–ë–™–ï–ö–¢–ê –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò
        ============================================
        –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {self.cadastral_number}
        –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}

        1. –ü–†–ê–í–û –°–û–ë–°–¢–í–ï–ù–ù–û–°–¢–ò:
        {'–ù–µ –Ω–∞–π–¥–µ–Ω–æ' if not self.ownership_data else f"""
           –°—Ç–∞—Ç—É—Å: {self.ownership_data.get('status', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
           –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {self.ownership_data.get('owner', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
           –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {self.ownership_data.get('registration_date', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
           –î–æ–ª—è: {self.ownership_data.get('share', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
        """}

        2. –û–ë–†–ï–ú–ï–ù–ï–ù–ò–Ø:
        {('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' if not self.encumbrances else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               '\n'.join([f'   - {enc.get("type")} ({enc.get("registrator")})'
for enc in self.encumbrances]))}

        3. –í–ò–î –†–ê–ó–†–ï–®–ï–ù–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø (–í–†–ò):
        {'–ù–µ –Ω–∞–π–¥–µ–Ω' if not self.vri_data else f"""
           –ö–æ–¥: {self.vri_data.get('code', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
           –û–ø–∏—Å–∞–Ω–∏–µ: {self.vri_data.get('description', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
           –†–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {self.vri_data.get('permitted_use', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
        """}

        –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
        {self.generate_recommendations()}
        """
        return report

    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        recommendations = []

        if not self.ownership_data:
            recommendations.append("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Å—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏")

        if self.encumbrances:
            recommendations.append("‚ö†Ô∏è  –£—á–µ—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ —Å–¥–µ–ª–∫–µ")

        if self.vri_data and '–∂–∏–ª–æ–π' in self.vri_data.get('description', '').lower():
            recommendations.append("‚úÖ –í–†–ò —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∂–∏–ª–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é")

        return "\n".join(recommendations) if recommendations else "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö issues –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"


def real_estate_checker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    print("üè† –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–û–í–û–ì–û –†–ï–ñ–ò–ú–ê –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò")
    print("=" * 50)

    checker = RealEstateChecker()

    # –í–≤–æ–¥ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    cadastral = input("–í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä (—Ñ–æ—Ä–º–∞—Ç: XX:XX:XXXXXX:XXX): ").strip()

    if not checker.validate_cadastral_number(cadastral):
        print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞!")
        print("–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: 77:01:0001015:123")
        return

    checker.cadastral_number = cadastral

    print("\nüîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
    ownership = checker.check_ownership()
    if 'error' in ownership:
        print(f"–û—à–∏–±–∫–∞: {ownership['error']}")
        return

    checker.check_encumbrances()
    checker.check_vri()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    report = checker.generate_report()
    print(report)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    filename = f"–æ—Ç—á–µ—Ç_–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å_{cadastral.replace(':', '_')}.txt"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report)
    print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if __name__ == "__main__":
    real_estate_checker()