import re
from datetime import datetime
import json


class ContractRiskAnalyzer:
    def __init__(self):
        self.risk_keywords = {
            '–Ω–µ—É—Å—Ç–æ–π–∫–∞': {
                'level': '–≤—ã—Å–æ–∫–∏–π',
                'description': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –Ω–µ—É—Å—Ç–æ–π–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç. 333 –ì–ö –†–§',
                'recommendation': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –Ω–µ—É—Å—Ç–æ–π–∫–∏ —Å–æ—Ä–∞–∑–º–µ—Ä–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–º —É–±—ã—Ç–∫–∞–º',
                'context_keywords': ['–ø—Ä–æ—Ü–µ–Ω—Ç', '–¥–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏', '—à—Ç—Ä–∞—Ñ', '–ø–µ–Ω—è']
            },
            '—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä': {
                'level': '—Å—Ä–µ–¥–Ω–∏–π',
                'description': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º–æ–π —Å–∏–ª—ã',
                'recommendation': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ—á–µ–Ω—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–ª–∏—à–Ω–µ —É–∑–∫–∏–º',
                'context_keywords': ['–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞', '–Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º–∞—è —Å–∏–ª–∞', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ']
            },
            '–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': {
                'level': '—Å—Ä–µ–¥–Ω–∏–π',
                'description': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                'recommendation': '–ß–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏',
                'context_keywords': ['–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ', '—Ç–∞–π–Ω–∞']
            },
            '–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥': {
                'level': '–Ω–∏–∑–∫–∏–π',
                'description': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å —Å–ø–æ—Ä–æ–≤',
                'recommendation': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É',
                'context_keywords': ['—Å–ø–æ—Ä—ã', '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ', '–ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å']
            },
            '—É–±—ã—Ç–∫–∏': {
                'level': '–≤—ã—Å–æ–∫–∏–π',
                'description': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è –≤–æ–∑–º–µ—â–µ–Ω–∏—è —É–±—ã—Ç–∫–æ–≤',
                'recommendation': '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ clauses, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤',
                'context_keywords': ['–≤–æ–∑–º–µ—â–µ–Ω–∏–µ', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å']
            },
            '–±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ': {
                'level': '–≤—ã—Å–æ–∫–∏–π',
                'description': '–†–∏—Å–∫ –ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –¥–æ–≥–æ–≤–æ—Ä –¥–∞—Ä–µ–Ω–∏—è',
                'recommendation': '–î–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑–±–µ–≥–∞–π—Ç–µ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π',
                'context_keywords': ['–¥–∞—Ä–µ–Ω–∏–µ', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–±–µ–∑ –æ–ø–ª–∞—Ç—ã']
            },
            '–≥–∞—Ä–∞–Ω—Ç–∏—è': {
                'level': '—Å—Ä–µ–¥–Ω–∏–π',
                'description': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤',
                'recommendation': '–£—Ç–æ—á–Ω–∏—Ç–µ —Å—Ä–æ–∫–∏ –∏ –æ–±—ä–µ–º –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤',
                'context_keywords': ['–∫–∞—á–µ—Å—Ç–≤–æ', '—Å—Ä–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏–∏', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞']
            }
        }

    def preprocess_text(self, text):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = text.lower().strip()
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
        text = re.sub(r'\s+', ' ', text)
        return text

    def find_risk_context(self, text, keyword, context_words=5):
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ —Ä–∏—Å–∫-—Å–ª–æ–≤–∞"""
        pattern = re.compile(re.escape(keyword), re.IGNORECASE)
        matches = []

        for match in pattern.finditer(text):
            start = max(0, match.start() - 50)
            end = min(len(text), match.end() + 50)
            context = text[start:end]
            # –í—ã–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            highlighted_context = context.replace(keyword, f'**{keyword.upper()}**')
            matches.append(highlighted_context)

        return matches

    def analyze_contract(self, contract_text):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        processed_text = self.preprocess_text(contract_text)

        found_risks = {}

        # –ü–æ–∏—Å–∫ —Ä–∏—Å–∫-—Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        for keyword, risk_info in self.risk_keywords.items():
            if re.search(r'\b' + re.escape(keyword) + r'\b', processed_text):
                # –ù–∞–π–¥–µ–Ω–æ —Ä–∏—Å–∫-—Å–ª–æ–≤–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                contexts = self.find_risk_context(processed_text, keyword)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                context_analysis = []
                for context_word in risk_info['context_keywords']:
                    if context_word in processed_text:
                        context_analysis.append(context_word)

                found_risks[keyword] = {
                    'level': risk_info['level'],
                    'description': risk_info['description'],
                    'recommendation': risk_info['recommendation'],
                    'contexts': contexts,
                    'related_contexts': context_analysis,
                    'context_found': len(context_analysis) > 0
                }

        return found_risks

    def generate_report(self, found_risks, contract_name=""):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–∞–º"""
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")

        report = f"""
        –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –î–û–ì–û–í–û–†–ê –ù–ê –†–ò–°–ö–ò
        ==================================
        –î–æ–≥–æ–≤–æ—Ä: {contract_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}
        –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {timestamp}
        –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–∏—Å–∫–æ–≤: {len(found_risks)}

        """

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
        high_risks = {k: v for k, v in found_risks.items() if v['level'] == '–≤—ã—Å–æ–∫–∏–π'}
        medium_risks = {k: v for k, v in found_risks.items() if v['level'] == '—Å—Ä–µ–¥–Ω–∏–π'}
        low_risks = {k: v for k, v in found_risks.items() if v['level'] == '–Ω–∏–∑–∫–∏–π'}

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
        if high_risks:
            report += "\nüö® –í–´–°–û–ö–ò–ô –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê:\n" + "=" * 40 + "\n"
            for keyword, risk in high_risks.items():
                report += self._format_risk(keyword, risk)

        if medium_risks:
            report += "\n‚ö†Ô∏è  –°–†–ï–î–ù–ò–ô –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê:\n" + "=" * 40 + "\n"
            for keyword, risk in medium_risks.items():
                report += self._format_risk(keyword, risk)

        if low_risks:
            report += "\n‚ÑπÔ∏è  –ù–ò–ó–ö–ò–ô –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê:\n" + "=" * 40 + "\n"
            for keyword, risk in low_risks.items():
                report += self._format_risk(keyword, risk)

        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report += f"""
        –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
        ------------------
        –í—Å–µ–≥–æ —Ä–∏—Å–∫–æ–≤: {len(found_risks)}
        –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {len(high_risks)}
        –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {len(medium_risks)}
        –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: {len(low_risks)}

        –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
        -------------
        {self._generate_overall_recommendations(found_risks)}
        """

        return report

    def _format_risk(self, keyword, risk):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∏—Å–∫–µ"""
        risk_text = f"""
        –†–ò–°–ö: {keyword.upper()}
        –£—Ä–æ–≤–µ–Ω—å: {risk['level'].upper()}
        –û–ø–∏—Å–∞–Ω–∏–µ: {risk['description']}
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {risk['recommendation']}
        """

        if risk['contexts']:
            risk_text += "        –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n"
            for i, context in enumerate(risk['contexts'][:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                risk_text += f"          {i}. ...{context}...\n"

        if risk['related_contexts']:
            risk_text += f"        –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(risk['related_contexts'])}\n"

        risk_text += "\n" + "-" * 50 + "\n"
        return risk_text

    def _generate_overall_recommendations(self, found_risks):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        if not found_risks:
            return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º."

        recommendations = []

        if any(risk['level'] == '–≤—ã—Å–æ–∫–∏–π' for risk in found_risks.values()):
            recommendations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∏—Å–∫–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.")

        if '–Ω–µ—É—Å—Ç–æ–π–∫–∞' in found_risks:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä –Ω–µ—É—Å—Ç–æ–π–∫–∏ –Ω–∞ —Å–æ—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å (—Å—Ç. 333 –ì–ö –†–§).")

        if '–±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ' in found_risks:
            recommendations.append("–ò—Å–∫–ª—é—á–∏—Ç—å –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –¥–∞—Ä–µ–Ω–∏–µ.")

        if '—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä' in found_risks:
            recommendations.append("–†–∞—Å—à–∏—Ä–∏—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤.")

        return "\n        ".join(recommendations) if recommendations else "–†–∏—Å–∫–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è."


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –î–û–ì–û–í–û–†–û–í –ù–ê –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –†–ò–°–ö–ò")
    print("=" * 60)

    analyzer = ContractRiskAnalyzer()

    # –ü—Ä–∏–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    sample_contract = """
    –î–û–ì–û–í–û–† –ü–û–°–¢–ê–í–ö–ò ‚Ññ 123/–ü
    –≥. –ú–æ—Å–∫–≤–∞ ¬´01¬ª —Å–µ–Ω—Ç—è–±—Ä—è 2023 –≥.

    –û–û–û ¬´–ü–æ—Å—Ç–∞–≤—â–∏–∫¬ª, –∏–º–µ–Ω—É–µ–º–æ–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º ¬´–ü–æ—Å—Ç–∞–≤—â–∏–∫¬ª, —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –∏
    –û–û–û ¬´–ü–æ–∫—É–ø–∞—Ç–µ–ª—å¬ª, –∏–º–µ–Ω—É–µ–º–æ–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º ¬´–ü–æ–∫—É–ø–∞—Ç–µ–ª—å¬ª, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã,
    –∑–∞–∫–ª—é—á–∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–æ–≥–æ–≤–æ—Ä –æ –Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–µ–º:

    1. –ü–†–ï–î–ú–ï–¢ –î–û–ì–û–í–û–†–ê
    –ü–æ—Å—Ç–∞–≤—â–∏–∫ –æ–±—è–∑—É–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¢–æ–≤–∞—Ä, –∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ.

    2. –ü–û–†–Ø–î–û–ö –†–ê–°–ß–ï–¢–û–í
    –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏.
    –ó–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –æ–ø–ª–∞—Ç—ã –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–ø–ª–∞—á–∏–≤–∞–µ—Ç –ù–ï–£–°–¢–û–ô–ö–£ –≤ —Ä–∞–∑–º–µ—Ä–µ 1% –æ—Ç —Å—É–º–º—ã –¥–æ–ª–≥–∞ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏.

    3. –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨ –°–¢–û–†–û–ù
    –°—Ç–æ—Ä–æ–Ω—ã –æ—Å–≤–æ–±–æ–∂–¥–∞—é—Ç—Å—è –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º–æ–π —Å–∏–ª—ã (–§–û–†–°-–ú–ê–ñ–û–†).
    –í–æ–∑–º–µ—â–µ–Ω–∏–µ –£–ë–´–¢–ö–û–í –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è —Å—É–º–º–æ–π –¥–æ–≥–æ–≤–æ—Ä–∞.

    4. –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–¨
    –£—Å–ª–æ–≤–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –î–æ–≥–æ–≤–æ—Ä–∞ —è–≤–ª—è—é—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

    5. –†–ê–ó–†–ï–®–ï–ù–ò–ï –°–ü–û–†–û–í
    –í—Å–µ —Å–ø–æ—Ä—ã –ø–æ–¥–ª–µ–∂–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é –≤ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º —Å—É–¥–µ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã.

    6. –ü–†–û–ß–ò–ï –£–°–õ–û–í–ò–Ø
    –ü–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ë–ï–ó–í–û–ó–ú–ï–ó–î–ù–û–ô –æ—Å–Ω–æ–≤–µ –≤ —Ä–∞–º–∫–∞—Ö –∞–∫—Ü–∏–∏.
    """

    print("1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞")
    print("2. –í–≤–æ–¥ —Å–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞")
    print("3. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞")

    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-3): ").strip()

    if choice == "1":
        contract_text = sample_contract
        contract_name = "–ü—Ä–∏–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"
    elif choice == "2":
        print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ (Ctrl+D –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞):")
        contract_text = ""
        try:
            while True:
                line = input()
                contract_text += line + "\n"
        except EOFError:
            pass
        contract_name = "–í–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä"
    elif choice == "3":
        filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ").strip()
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                contract_text = f.read()
            contract_name = filename
        except FileNotFoundError:
            print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä.")
            contract_text = sample_contract
            contract_name = "–ü—Ä–∏–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"
    else:
        print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä.")
        contract_text = sample_contract
        contract_name = "–ü—Ä–∏–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"

    # –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞: {contract_name}")
    found_risks = analyzer.analyze_contract(contract_text)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    report = analyzer.generate_report(found_risks, contract_name)
    print(report)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_filename = f"–æ—Ç—á–µ—Ç_—Ä–∏—Å–∫–∏_{timestamp}.txt"

    with open(report_filename, 'w', encoding='utf-8') as f:
        f.write(report)

    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    json_data = {
        'contract_name': contract_name,
        'analysis_date': datetime.now().isoformat(),
        'total_risks': len(found_risks),
        'risks': found_risks
    }

    json_filename = f"—Ä–∏—Å–∫–∏_{timestamp}.json"
    with open(json_filename, 'w', encoding='utf-8') as f:
        json.dump(json_data, f, ensure_ascii=False, indent=2)

    print(f"üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON: {json_filename}")


if __name__ == "__main__":
    main()